{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"file:///home/freddy/dev/dartspace/trace-buddy/rt/scene.dart","id":"rt_primitives","children":[{"superclass":{"name":"Primitive","refId":"rt_primitives/Primitive"},"kind":"class","name":"ImplicitFunction","id":"ImplicitFunction","comment":"\nA [ImplicitFunction] is defined by a [MathFunction].\n\nIts intersect uses Interval arithmetic and Newton's method to determine\nroots.\n","children":[{"returnType":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"method","name":"intersect","id":"intersect2()","children":[{"ref":{"name":"Ray","refId":"rt_basics/Ray"},"kind":"param","name":"r","id":"r"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"prevBestDistance","id":"prevBestDistance"}],"line":"393"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"findRootBF","id":"findRootBF2()","children":[{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"param","name":"g","id":"g"},{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"427"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"findRoot","id":"findRoot2()","children":[{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"param","name":"g","id":"g"},{"ref":{"name":"Interval","refId":"math_expressions/Interval"},"kind":"param","name":"i","id":"i"}],"line":"448"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"newtonRoot","id":"newtonRoot2()","children":[{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"param","name":"f","id":"f"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"startValue","id":"startValue"}],"line":"483"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"_newtonRoot","id":"_newtonRoot3()","children":[{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"param","name":"f","id":"f"},{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"param","name":"g","id":"g"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"startValue","id":"startValue"}],"isPrivate":true,"line":"488"},{"returnType":{"name":"Shader","refId":"rt_shader/Shader"},"kind":"method","name":"getShader","id":"getShader1()","children":[{"ref":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"param","name":"intersect","id":"intersect"}],"line":"512"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"535"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"maxDistance","id":"maxDistance","line":"385"},{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"kind":"variable","name":"f","id":"f","line":"386"},{"ref":{"name":"ContextModel","refId":"math_expressions/ContextModel"},"kind":"variable","name":"cm","id":"cm","line":"387"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"MathFunction","refId":"math_expressions/MathFunction"},"initializedField":{"name":"f","refId":"rt_primitives/ImplicitFunction/f"},"kind":"param","name":"f","id":"f"},{"ref":{"name":"Shader","refId":"rt_shader/Shader"},"isOptional":true,"kind":"param","name":"shader","id":"shader"}],"line":"389"}],"line":"383"},{"superclass":{"name":"Primitive","refId":"rt_primitives/Primitive"},"kind":"class","name":"Sphere","id":"Sphere","comment":"\nA [Sphere], defined by its center point and radius.\n","children":[{"returnType":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"method","name":"intersect","id":"intersect2()","children":[{"ref":{"name":"Ray","refId":"rt_basics/Ray"},"kind":"param","name":"r","id":"r"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"prevBestDistance","id":"prevBestDistance"}],"line":"320"},{"returnType":{"name":"Shader","refId":"rt_shader/Shader"},"kind":"method","name":"getShader","id":"getShader1()","children":[{"ref":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"param","name":"intersect","id":"intersect"}],"line":"367"},{"ref":{"name":"Point3D","refId":"math_expressions/Point3D"},"kind":"property","name":"origin","id":"origin","line":"309"},{"ref":{"name":"Point3D","refId":"math_expressions/Point3D"},"kind":"variable","name":"center","id":"center","comment":"The center of this sphere.","line":"304"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"variable","name":"radius","id":"radius","comment":"The radius of this sphere.","line":"307"},{"kind":"constructor","name":"","id":"3()","comment":"\nCreates a new [Sphere] with the given center, radius and shader.\n\nThe radius of a sphere must not be zero or less.\n","children":[{"ref":{"name":"Point3D","refId":"math_expressions/Point3D"},"initializedField":{"name":"center","refId":"rt_primitives/Sphere/center"},"kind":"param","name":"center","id":"center"},{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"radius","refId":"rt_primitives/Sphere/radius"},"kind":"param","name":"radius","id":"radius"},{"ref":{"name":"Shader","refId":"rt_shader/Shader"},"isOptional":true,"kind":"param","name":"shader","id":"shader"}],"line":"316"}],"line":"301"},{"superclass":{"name":"Primitive","refId":"rt_primitives/Primitive"},"kind":"class","name":"CartesianCoordinateSystem","id":"CartesianCoordinateSystem","comment":"\nA [CartesianCoordinateSystem] is a special primitive,\nit represents the x,y and z-axes. Only one instance of the\nCartesianCoordinateSystem can exist per scene, therefore\nit is implemented as singleton.\n","children":[{"returnType":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"method","name":"intersect","id":"intersect2()","children":[{"ref":{"name":"Ray","refId":"rt_basics/Ray"},"kind":"param","name":"r","id":"r"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"prevBestDistance","id":"prevBestDistance"}],"line":"266"},{"returnType":{"name":"Shader","refId":"rt_shader/Shader"},"kind":"method","name":"getShader","id":"getShader1()","children":[{"ref":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"param","name":"intersect","id":"intersect"}],"line":"289"},{"ref":{"name":"Point3D","refId":"math_expressions/Point3D"},"kind":"property","name":"origin","id":"origin","line":"243"},{"ref":{"name":"Primitive","refId":"rt_primitives/Primitive"},"isStatic":true,"kind":"variable","name":"_instance","id":"_instance","isPrivate":true,"line":"236"},{"ref":{"name":"double","refId":"dart.core/double"},"isFinal":true,"kind":"variable","name":"THRESH","id":"THRESH","comment":"Threshold value for determine if an axis intersection occured.","line":"239"},{"ref":{"name":"InfinitePlane","refId":"rt_primitives/InfinitePlane"},"kind":"variable","name":"_xAxis","id":"_xAxis","isPrivate":true,"line":"241"},{"ref":{"name":"InfinitePlane","refId":"rt_primitives/InfinitePlane"},"kind":"variable","name":"_yAxis","id":"_yAxis","isPrivate":true,"line":"241"},{"ref":{"name":"InfinitePlane","refId":"rt_primitives/InfinitePlane"},"kind":"variable","name":"_zAxis","id":"_zAxis","isPrivate":true,"line":"241"},{"returnType":{"name":"CartesianCoordinateSystem","refId":"rt_primitives/CartesianCoordinateSystem"},"kind":"constructor","name":"","id":"0()","comment":"\nReturns always the same instance of CartesianCoordinateSystem in the\ncontext of an application.\n","line":"249"},{"kind":"constructor","name":"_internal","id":"_internal0()","comment":"\nInternal constructor to realize singleton implementation.\n","isPrivate":true,"line":"259"}],"line":"234"},{"superclass":{"name":"Primitive","refId":"rt_primitives/Primitive"},"kind":"class","name":"InfinitePlane","id":"InfinitePlane","comment":"\nAn [InfinitePlane] is specified by its plane equation.\n","children":[{"returnType":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"method","name":"intersect","id":"intersect2()","children":[{"ref":{"name":"Ray","refId":"rt_basics/Ray"},"kind":"param","name":"r","id":"r"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"prevBestDistance","id":"prevBestDistance"}],"line":"198"},{"returnType":{"name":"Shader","refId":"rt_shader/Shader"},"kind":"method","name":"getShader","id":"getShader1()","children":[{"ref":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"param","name":"intersect","id":"intersect"}],"line":"218"},{"ref":{"name":"Vector4","refId":"vector_math/Vector4"},"kind":"variable","name":"equation","id":"equation","comment":"The plane equation.","line":"185"},{"ref":{"name":"Point3D","refId":"math_expressions/Point3D"},"kind":"variable","name":"origin","id":"origin","comment":"The plane origin.","line":"188"},{"kind":"constructor","name":"","id":"3()","comment":"\nCreates a new [InfinitePlane] from the given origin, normal and shader.\n","children":[{"ref":{"name":"Point3D","refId":"math_expressions/Point3D"},"initializedField":{"name":"origin","refId":"rt_primitives/InfinitePlane/origin"},"kind":"param","name":"origin","id":"origin"},{"ref":{"name":"Vector3","refId":"vector_math/Vector3"},"kind":"param","name":"normal","id":"normal"},{"ref":{"name":"Shader","refId":"rt_shader/Shader"},"isOptional":true,"kind":"param","name":"shader","id":"shader"}],"line":"193"}],"line":"182"},{"superclass":{"name":"Primitive","refId":"rt_primitives/Primitive"},"kind":"class","name":"Scene","id":"Scene","comment":"\nA [Scene] basically is a collection of [Primitive]s which together\nform the scene to be rendered.\n\nThe [Scene] itself is a primitive as well, and offers an intersect method.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds the given [Primitive] to this scene.\n","children":[{"ref":{"name":"Primitive","refId":"rt_primitives/Primitive"},"kind":"param","name":"p","id":"p"}],"line":"104"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the [Primitive] with given id from this scene.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"primId","id":"primId"}],"line":"111"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"displayCCS","id":"displayCCS1()","comment":"\nGiven parameter determines if the cartesian coordinate system will be\nrendered in this scene.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"displayCCS","id":"displayCCS"}],"line":"129"},{"returnType":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"method","name":"intersect","id":"intersect2()","comment":"\nPerforms a ray - scene intersection.\n\nIterates over all primitives and calls their intersect.\nWill only return hit points which are closer than the specified\n`prevBestDistance`.\n","children":[{"ref":{"name":"Ray","refId":"rt_basics/Ray"},"kind":"param","name":"r","id":"r"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"prevBestDistance","id":"prevBestDistance"}],"line":"147"},{"returnType":{"name":"Shader","refId":"rt_shader/Shader"},"kind":"method","name":"getShader","id":"getShader1()","children":[{"ref":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"param","name":"intersect","id":"intersect"}],"line":"173"},{"ref":{"name":"CartesianCoordinateSystem","refId":"rt_primitives/CartesianCoordinateSystem"},"kind":"variable","name":"ccs","id":"ccs","comment":"The cartesian coordinate system of this scene.","line":"81"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Primitive","refId":"rt_primitives/Primitive"}]},"kind":"variable","name":"nonIdxPrimitives","id":"nonIdxPrimitives","comment":"A list of non-indexable primitives in the scene.","line":"84"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a new [Scene]. Takes an optional parameter `primitives`,\nwhich initialized the scene with the given primitives instead\nof creating an empty one.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Primitive","refId":"rt_primitives/Primitive"}]},"isOptional":true,"kind":"param","name":"primitives","id":"primitives"}],"line":"91"}],"line":"78"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Primitive","id":"Primitive","comment":"\nA [Primitive] is an arbitrary object which can be part of a scene and\nrendered by the ray tracer.\n\nAny concrete implementation of a [Primitive] needs to implement the\nintersect method, which tests for ray/primitive intersection.\nA primitive can be any geometric shape, mathematical function, etc.\n\nEvery primitive has an unique ID, and a shader. When creating your\nown primitive, don't forget to call the super() contructor to auto-\nmatically generate the id.\n","children":[{"returnType":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"method","name":"intersect","id":"intersect2()","comment":"\nPerforms a ray - primitive intersection test.\nReturns an [Intersection] object with the associated information.\n\nIf the ray did not hit the primitive, the distance will be negative.\n","children":[{"ref":{"name":"Ray","refId":"rt_basics/Ray"},"kind":"param","name":"ray","id":"ray"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"previousBestDistance","id":"previousBestDistance"}],"line":"49"},{"returnType":{"name":"Shader","refId":"rt_shader/Shader"},"kind":"method","name":"getShader","id":"getShader1()","comment":"\nReturns the shader for a given intersection point.\n","children":[{"ref":{"name":"Intersection","refId":"rt_basics/Intersection"},"kind":"param","name":"intersect","id":"intersect"}],"line":"54"},{"ref":{"name":"Point3D","refId":"math_expressions/Point3D"},"kind":"property","name":"origin","id":"origin","comment":"The origin of the primitive (only used for GUI).","line":"60"},{"ref":{"name":"Vector4","refId":"vector_math/Vector4"},"kind":"property","name":"color","id":"color","comment":"The primary color of the primitive as vector4 (only used for GUI).","line":"63"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"colorString","id":"colorString","comment":"The primary color of the primitive as CSS rgba string (only used for GUI).","line":"66"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"id","id":"id","comment":"Unique id of the primitive.","line":"26"},{"ref":{"name":"Shader","refId":"rt_shader/Shader"},"kind":"variable","name":"_shader","id":"_shader","comment":"The shader is responsible for the primitive's appearance.","isPrivate":true,"line":"29"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a new [Primitive] and assigns an unique id to it.\nThe optional parameter `shader` can be used to set a shader for this\nprimitive. If no shader is assigned, a default [AmbientShader] will\nbe created.\n","children":[{"ref":{"name":"Shader","refId":"rt_shader/Shader"},"isOptional":true,"initializedField":{"name":"_shader","refId":"rt_primitives/Primitive/_shader"},"kind":"param","name":"_shader","id":"_shader","isPrivate":true}],"line":"37"}],"line":"23"}],"uri":"file:///home/freddy/dev/dartspace/trace-buddy/rt/scene.dart","line":"1"}